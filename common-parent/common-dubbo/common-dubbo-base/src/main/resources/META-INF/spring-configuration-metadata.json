{
  "groups": [
    {
      "name": "dubbo",
      "type": "com.sfsctech.dubbo.base.properties.DubboProperties",
      "sourceType": "com.sfsctech.dubbo.base.properties.DubboProperties"
    },
    {
      "name": "dubbo.application",
      "type": "com.sfsctech.dubbo.base.properties.DubboProperties$Application",
      "sourceType": "com.sfsctech.dubbo.base.properties.DubboProperties",
      "sourceMethod": "getApplication()"
    },
    {
      "name": "dubbo.registry",
      "type": "com.sfsctech.dubbo.base.properties.DubboProperties$Registry",
      "sourceType": "com.sfsctech.dubbo.base.properties.DubboProperties",
      "sourceMethod": "getRegistry()"
    },
    {
      "name": "dubbo.protocol",
      "type": "com.sfsctech.dubbo.base.properties.DubboProperties$Protocol",
      "sourceType": "com.sfsctech.dubbo.base.properties.DubboProperties",
      "sourceMethod": "getProtocol()"
    },
    {
      "name": "dubbo.rpc",
      "type": "com.sfsctech.dubbo.base.properties.DubboProperties$Rpc",
      "sourceType": "com.sfsctech.dubbo.base.properties.DubboProperties",
      "sourceMethod": "getRpc()"
    },
    {
      "name": "dubbo.dev-setting",
      "type": "com.sfsctech.dubbo.base.properties.DubboProperties$DevSetting",
      "sourceType": "com.sfsctech.dubbo.base.properties.DubboProperties",
      "sourceMethod": "getDevSetting()"
    }
  ],
  "properties": [
    {
      "name": "dubbo.application.name",
      "type": "java.lang.String",
      "description": "服务提供者名称",
      "sourceType": "com.sfsctech.dubbo.base.properties.DubboProperties$Application"
    },
    {
      "name": "dubbo.application.logger",
      "type": "java.lang.String",
      "description": "日志适配",
      "sourceType": "com.sfsctech.dubbo.base.properties.DubboProperties$Application"
    },
    {
      "name": "dubbo.registry.protocol",
      "type": "java.lang.String",
      "description": "zookeeper注册中心类型",
      "sourceType": "com.sfsctech.dubbo.base.properties.DubboProperties$Registry"
    },
    {
      "name": "dubbo.registry.address",
      "type": "java.lang.String",
      "description": "zookeeper注册中心服务地址",
      "sourceType": "com.sfsctech.dubbo.base.properties.DubboProperties$Registry"
    },
    {
      "name": "dubbo.registry.check",
      "type": "java.lang.Boolean",
      "description": "注册中心不存在时，是否报错",
      "sourceType": "com.sfsctech.dubbo.base.properties.DubboProperties$Registry"
    },
    {
      "name": "dubbo.registry.register",
      "type": "java.lang.Boolean",
      "description": "是否向此注册中心注册服务，如果设为false，将只订阅，不注册",
      "sourceType": "com.sfsctech.dubbo.base.properties.DubboProperties$Registry"
    },
    {
      "name": "dubbo.registry.subscribe",
      "type": "java.lang.Boolean",
      "description": "是否向此注册中心订阅服务，如果设为false，将只注册，不订阅",
      "sourceType": "com.sfsctech.dubbo.base.properties.DubboProperties$Registry"
    },
    {
      "name": "dubbo.registry.timeout",
      "type": "java.lang.Integer",
      "description": "注册中心请求超时时间(毫秒)",
      "sourceType": "com.sfsctech.dubbo.base.properties.DubboProperties$Registry"
    },
    {
      "name": "dubbo.protocol.optimizer",
      "type": "com.sfsctech.dubbo.base.properties.DubboProperties.SerializeOptimizer",
      "description": "dubbo序列化优化",
      "sourceType": "com.sfsctech.dubbo.base.properties.DubboProperties$Protocol"
    },
    {
      "name": "dubbo.protocol.config",
      "type": "com.sfsctech.dubbo.base.properties.DubboProperties.Config",
      "description": "dubbo协议配置",
      "sourceType": "com.sfsctech.dubbo.base.properties.DubboProperties$Protocol"
    },
    {
      "name": "dubbo.protocol.threadPool",
      "type": "com.sfsctech.dubbo.base.properties.DubboProperties.ThreadPool",
      "description": "dubbo线程池类型配置",
      "sourceType": "com.sfsctech.dubbo.base.properties.DubboProperties$Protocol"
    },
    {
      "name": "dubbo.protocol.threads",
      "type": "java.lang.Integer",
      "description": "dubbo服务最大线程池",
      "sourceType": "com.sfsctech.dubbo.base.properties.DubboProperties$Protocol"
    },
    {
      "name": "dubbo.protocol.dispatcher",
      "type": "com.sfsctech.dubbo.base.properties.DubboProperties.Dispatcher",
      "description": "dubbo信息线程模型派发方式配置",
      "sourceType": "com.sfsctech.dubbo.base.properties.DubboProperties$Protocol"
    },
    {
      "name": "dubbo.protocol.single.name",
      "type": "java.lang.String",
      "description": "协议名称",
      "sourceType": "com.sfsctech.dubbo.base.properties.DubboProperties$Protocol",
      "defaultValue": "dubbo"
    },
    {
      "name": "dubbo.protocol.single.port",
      "type": "java.lang.Integer",
      "description": "协议端口",
      "sourceType": "com.sfsctech.dubbo.base.properties.DubboProperties$Protocol",
      "defaultValue": 20080
    },
    {
      "name": "dubbo.protocol.single.server",
      "type": "java.lang.String",
      "description": "协议的服务器端实现类型",
      "sourceType": "com.sfsctech.dubbo.base.properties.DubboProperties$Protocol"
    },
    {
      "name": "dubbo.protocol.multiple",
      "type": "java.util.Map<java.lang.String, com.alibaba.dubbo.multiple.ProtocolConfig>",
      "description": "dubbo 多协议配置",
      "sourceType": "java.util.Map<java.lang.String,com.alibaba.dubbo.multiple.ProtocolConfig>"
    },
    {
      "name": "dubbo.rpc.service-package",
      "type": "java.lang.String",
      "description": "服务类所在的包路径，多个包名可以使用英文逗号分隔",
      "sourceType": "com.sfsctech.dubbo.base.properties.DubboProperties$Rpc"
    },
    {
      "name": "dubbo.rpc.concurrency",
      "type": "java.lang.Integer",
      "description": "熔断策略：并发量",
      "sourceType": "com.sfsctech.dubbo.base.properties.DubboProperties$Rpc"
    },
    {
      "name": "dubbo.dev-setting.system-path",
      "type": "java.lang.String",
      "description": "系统用户路径",
      "sourceType": "com.sfsctech.dubbo.base.properties.DubboProperties$DevSetting"
    },
    {
      "name": "dubbo.dev-setting.develop",
      "type": "java.util.List<com.sfsctech.dubbo.base.properties.DubboProperties.Develop>",
      "description": "开发设置",
      "sourceType": "com.sfsctech.dubbo.base.properties.DubboProperties$DevSetting"
    },
    {
      "name": "dubbo.dev-setting.develop.name",
      "type": "java.lang.String",
      "description": "协议名称",
      "sourceType": "com.sfsctech.dubbo.base.properties.DubboProperties$DevSetting$Develop"
    },
    {
      "name": "dubbo.dev-setting.develop.port",
      "type": "java.lang.Integer",
      "description": "协议端口",
      "sourceType": "com.sfsctech.dubbo.base.properties.DubboProperties$DevSetting$Develop"
    },
    {
      "name": "dubbo.dev-setting.develop.inf-package",
      "type": "java.lang.String",
      "description": "接口package路径",
      "sourceType": "com.sfsctech.dubbo.base.properties.DubboProperties$DevSetting$Develop"
    }
  ],
  "hints": [
    {
      "name": "dubbo.protocol.config",
      "values": [
        {
          "value": "Single"
        },
        {
          "value": "Multiple"
        }
      ]
    },
    {
      "name": "dubbo.protocol.optimizer",
      "values": [
        {
          "value": "Kryo",
          "description": "dubbo采用Kryo序列化"
        }
      ]
    },
    {
      "name": "dubbo.protocol.threadPool",
      "values": [
        {
          "value": "fixed",
          "description": "固定大小线程池，启动时建立线程，不关闭，一直持有"
        },
        {
          "value": "cached",
          "description": "缓存线程池，空闲一分钟自动删除，需要时重建"
        },
        {
          "value": "limited",
          "description": "可伸缩线程池，但池中的线程数只会增长不会收缩"
        },
        {
          "value": "eager",
          "description": "优先创建Worker线程池"
        }
      ]
    },
    {
      "name": "dubbo.protocol.dispatcher",
      "values": [
        {
          "value": "message",
          "description": "只有请求响应消息派发到线程池，其它连接断开事件，心跳等消息，直接在 IO 线程上执行"
        },
        {
          "value": "connection",
          "description": "在 IO 线程上，将连接断开事件放入队列，有序逐个执行，其它消息派发到线程池"
        }
      ]
    },
    {
      "name": "dubbo.protocol.single.name",
      "values": [
        {
          "value": "dubbo",
          "description": "dubbo通信协议，dubbo缺省协议，适用场景：常规远程服务方法调用"
        },
        {
          "value": "rmi",
          "description": "rmi通信协议，采用JDK标准的java.rmi.*实现，适用场景：常规远程服务方法调用，与原生RMI服务互操作。"
        },
        {
          "value": "hessian",
          "description": "hessian通信协议，基于Hessian框架的通信协议，适用场景：页面传输，文件传输，与原生hessian服务交互。"
        },
        {
          "value": "http",
          "description": "http通信协议，采用Spring的HttpInvoker实现，适用场景：前端调用、移动端调用，跨语言调用。"
        },
        {
          "value": "webservice",
          "description": "webservice通信协议，基于CXF的frontend-simple和transports-http实现，适用场景：系统集成，跨语言调用。"
        },
        {
          "value": "thrif",
          "description": "thrift通信协议，基于Thrift框架的通信协议，不建议使用"
        }
      ]
    },
    {
      "name": "dubbo.protocol.single.server",
      "values": [
        {
          "value": "mina"
        },
        {
          "value": "netty"
        },
        {
          "value": "jetty"
        },
        {
          "value": "servlet"
        }
      ]
    },
    {
      "name": "dubbo.registry.protocol",
      "values": [
        {
          "value": "zookeeper"
        },
        {
          "value": "redis"
        },
        {
          "value": "simple"
        },
        {
          "value": "multicast"
        }
      ]
    }
  ]
}